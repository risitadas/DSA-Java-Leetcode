class Solution {


    public int dfs(int course, Integer[] memo, ArrayList<Integer>[] graph, int[] time) 
    {
        if (memo[course] != null) 
        {
            return memo[course]; 
        }
        int max = 0;

        for (int i : graph[course])
        {
            max = Math.max(max, dfs(i, memo, graph, time));
        }

        return memo[course] = max + time[course - 1];




    }



    public int minimumTime(int n, int[][] relations, int[] time) 
    {

        ArrayList<Integer>[] graph = new ArrayList[n + 1];

        for (int i = 0; i <= n; i++) 
        {
            graph[i] = new ArrayList<>();
        }

       
        for (int[] r : relations) {
            graph[r[0]].add(r[1]);
        }

        Integer[] memo = new Integer[n + 1]; 
        int max = 0;

        for (int i = 1; i<= n; i++) 
        {
            max = Math.max(dfs(i, memo, graph, time), max);
        }
        return max;




        
    }
}
