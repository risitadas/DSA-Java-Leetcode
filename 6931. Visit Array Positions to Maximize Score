class Solution {
    
    public long maxScore(int[] nums, int x) 
    {
        
        
        
        
        long[] maxScore = new long[]{0,0};
        
        long result = 0;
        
        for(int i=nums.length-1; i>=0; i--)
        {
            
            int parity = nums[i] %2;
            
            result = Math.max(0, Math.max(maxScore[parity], maxScore[1-parity] - x) + nums[i]);
            
            maxScore[parity] = Math.max(maxScore[parity], result);
            
            
        }
        
        return result;
        
        
        
        
        
        
        
        
        
        /*
        int n = nums.length;
        
        long max = 0, currResult = 0;
        int left = 0;
        
        for(int i = 1; i<n; i++)
        {
            
            currResult += nums[i];
            
            
        }
        
        for(int right = 1; right <n; right++)
        {
            
            currResult -= nums[right];
            
            max = Math.max(max, currResult);
            
            while(left < right && nums[left] % 2 == nums[right] % 2)
            {
                
                currResult += nums[left];
                left++;
                
                    
            }
            
            while(left < right && currResult - (nums[left] / 2) >= max)
            {
                
                currResult -= nums[left];
                left++;
                
            }    
                
                
                
                
                
        }
        
        return max;
        
        
        
        */
        
        /*
        int n = nums.length;
        long[][] dp = new long[n][x+1];
        
        
        for(int i =1; i<n; i++)
        {
            
            
            for(int j=0; j<=x; j++)
            {
                
                dp[i][j] = -1;
                
            }
        }
        
        return dfs(nums, x, 0, x, dp);
        
        
        
        */
        
        
        
        /*
        
        int[] prefixSum = new int[n+1];
        
        for(int i = 0; i<n;i ++)
        {
            
            prefixSum[i+1] = prefixSum[i] + nums[i];
            
        }
        
        int maxScore = 0, low = 0, high = n-1;
        
        
        while(low<=high)
        {
            
            int leftScore = prefixSum[low] + Math.max(0, prefixSum[n] - prefixSum[high+1]) - prefixSum[n - (high - low + 1)];
            
            maxScore = Math.max(maxScore, leftScore);
            low++;
            
            int rightScore = prefixSum[high + 1] + Math.max(0, prefixSum[n] - prefixSum[low - 1]) - prefixSum[n - (high - low + 1)];
            
            maxScore = Math.max(maxScore, rightScore);
            high--;
            
            
        }
        
        return maxScore;
        
        */
        
        
        /*
        int[] even = new int[n];
        int[] odd = new int[n];
        
        even[0] = nums[0];
        odd[0] = 0;
        
        for(int i = 1; i< n; i++)
        {
            
            if(nums[i] %2 == 0)
            {
                
                even[i] = Math.max(even[i-1], even[i-1] + nums[i]);
            }
            else
            {
                
                even[i] = even[i-1] - x;
                
            }
            
            if(nums[i] % 2 == 1)
            {
                
                odd[i] = Math.max(odd[i-1], odd[i-1] + nums[i]);
                
                
            }
            else
            {
                
                odd[i] = odd[i-1] -x;
            }
        }
        
        return Math.max(even[n-1], odd[n-1]);
        
        */
        
        
        
        
        
        
        
        
        
        
        
        
    }



 /*
    
    public static long dfs(int[] nums, int x, int index, int parity, long[][] dp)
    {
        int n = nums.length;
        
        if(index == n)
        {
            
            return 0;
        }
        
        if(dp[index][parity] != -1)
        {
            
            return dp[index][parity];
            
        }
        
        long result = nums[index] + dfs(nums, x, index+1, parity, dp);
        
        
        if(parity > 0)
        {
            
            int next = index + 1;
            
            while(next < n && nums[next] %2 == nums[index] % 2)
            {
                
                next++;
                
            }
            
            if(next <n)
            {
                
                long m = nums[index] - x + dfs(nums, x, next, parity -1, dp);
                result = Math.max(result, m);
                
                
                
            }
            
            
        }
        
        dp[index][parity] = result;
        
        return result;

        
        
    }
    
    
    */
    
}
