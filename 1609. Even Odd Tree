/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{

    int[] h;

    public boolean isEvenOddTree(TreeNode root) 
    {
        h = new int[100001];
        return recur(root, 0);
    }

    public boolean recur(TreeNode root, int level)
    {
        if(root == null)
        {
            return true;
        }

        if((level & 1) == 0)
        {
            if((root.val & 1) == 0)
            {
                return false;
            }
            if(h[level] == 0)
            {
                h[level] = root.val;
            }
            else
            {
                if(h[level] >= root.val)
                {
                    return false;
                }
                else
                {
                    h[level] = root.val;
                }

            }

        }
        else
        {
            if((root.val & 1) == 1)
            {
                return false;
            }
            if(h[level] == 0)
            {
                h[level] = root.val;
            }
            else
            {
                if(h[level] <= root.val)
                {
                    return false;
                }
                else
                {
                    h[level] = root.val;
                }
            }

        }

        return recur(root.left, level + 1) && recur(root.right, level + 1);
    }


    



    /*
    public boolean isEvenOddTree(TreeNode root) 
    {


    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));
    boolean isEven = true;

    for (;!q.isEmpty(); isEven = !isEven) 
    {
      int prevVal = isEven ? Integer.MIN_VALUE : Integer.MAX_VALUE;
      for (int sz = q.size(); sz > 0; --sz) 
      {
        TreeNode node = q.poll();
        
        if (isEven && (node.val % 2 == 0 || node.val <= prevVal))
        {
            return false; 
            
        }

        if (!isEven && (node.val % 2 == 1 || node.val >= prevVal))
        {
            return false; 

        }

        
        prevVal = node.val;
        
        
        if (node.left != null)
        {
            q.offer(node.left);

        }

        if (node.right != null)
        {
            q.offer(node.right);

        }

      }


    }

    return true;
        
    }


    */
}
