class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) 
    {

        if(difficulty.length != profit.length)
        {
            return 0;

        }   

        int maxDiff = 0;
        for(int d : difficulty)
        {
            maxDiff = Math.max(maxDiff, d);

        }

        int[] bestProf = new int[maxDiff+1];
        for(int i=0; i<profit.length; i++)
        {
            bestProf[difficulty[i]] = Math.max(bestProf[difficulty[i]], profit[i]);

        }

        int maxProf =0;
        for(int i=0; i<bestProf.length; i++)
        {
            if(bestProf[i] >maxProf)
            {
                maxProf = bestProf[i];

            }
            bestProf[i] = maxProf;

        }

        int result=0;
        for(int w:worker)
        {
            if(w >maxDiff)
            {
                result+=bestProf[maxDiff];

            }
            else
            {
                result += bestProf[w];

            }
        
        }

        return result;










    /*

    RUNTIME 27 MS, MEMORY 45.89 MB



        int result = 0, maxProfit = 0;
        ArrayList<Pair<Integer, Integer>> jobs = new ArrayList<>();

        for(int i = 0; i < difficulty.length; ++i)
        {
            jobs.add(new Pair<>(difficulty[i], profit[i]));
        }

        Collections.sort(jobs, Comparator.comparing(Pair::getKey));
        Arrays.sort(worker);

        int i = 0;

        for(int w : worker) 
        {
            for(; i < jobs.size() && w >= jobs.get(i).getKey(); ++i)
            {
                maxProfit = Math.max(maxProfit, jobs.get(i).getValue());
            }
            
            result += maxProfit;
        }

        return result;


        */

        
    }
}
