class Solution {
    public long[] maximumSegmentSum(int[] nums, int[] removeQueries) 
    {

        int n = nums.length;
        long maxSum = 0;

        long[] result = new long[n];
        
        //for the segment [l, r], record its sum in sum[l] and sum[r]
        long[] sum = new long[n];
        
        //for the segment [l, r], record its count in count[l] and count[r]
        int[] count = new int[n];

        for(int i = n - 1; i >= 0; i--) 
        {
            result[i] = maxSum;
            int j = removeQueries[i];

            //calculating `segmentSum`.
            long leftSum = j > 0 ? sum[j - 1] : 0;
            long rightSum = j + 1 < n ? sum[j + 1] : 0;
            long segmentSum = nums[j] + leftSum + rightSum;

            //calculating `segmentCount`.
            int leftCount = j > 0 ? count[j - 1] : 0;
            int rightCount = j + 1 < n ? count[j + 1] : 0;
            int segmentCount = 1 + leftCount + rightCount;

            //updating the sum and count of the segment [l, r].
            int l = j - leftCount;
            int r = j + rightCount;
            
            sum[l] = segmentSum;
            sum[r] = segmentSum;
            count[l] = segmentCount;
            count[r] = segmentCount;
            maxSum = Math.max(maxSum, segmentSum);

        }

        return result;




        
    }
}
