class Solution 
{
    public int regionsBySlashes(String[] grid) 
    {
        int gridSize = grid.length;
        int pointsPerSide = gridSize + 1;
        int totalPoints = pointsPerSide * pointsPerSide;

        int[] parentArray = new int[totalPoints];
        Arrays.fill(parentArray, -1);

        for(int i = 0; i < pointsPerSide; i++) 
        {
            for(int j = 0; j < pointsPerSide; j++) 
            {
                if(i == 0 || j == 0 || i == pointsPerSide - 1 || j == pointsPerSide - 1) 
                {
                    int point = i * pointsPerSide + j;
                    parentArray[point] = 0;

                }
            }
        }

        parentArray[0] = -1;
        int regionCount = 1; 

        for(int i = 0; i < gridSize; i++) 
        {
            for(int j = 0; j < gridSize; j++) 
            {
                if(grid[i].charAt(j) == '/') 
                {
                    int topRight = i * pointsPerSide + (j + 1);
                    int bottomLeft = (i + 1) * pointsPerSide + j;
                    regionCount += union(parentArray, topRight, bottomLeft);

                } 
                else if(grid[i].charAt(j) == '\\') 
                {
                    int topLeft = i * pointsPerSide + j;
                    int bottomRight = (i + 1) * pointsPerSide + (j + 1);
                    regionCount += union(parentArray, topLeft, bottomRight);

                }

            }

        }

        return regionCount;

    }

    public int find(int[] parentArray, int node) 
    {
        if (parentArray[node] == -1) return node;

        return parentArray[node] = find(parentArray, parentArray[node]);
    }

    public int union(int[] parentArray, int node1, int node2)
    {
        
        int parent1 = find(parentArray, node1);
        int parent2 = find(parentArray, node2);

        if(parent1 == parent2) 
        {
            return 1; 

        }

        parentArray[parent2] = parent1; 
        return 0; 
    }



/*
RUNTIME 7 MS, MEMORY 42.76 MB


    public void dfs(int[][] g, int i, int j) 
    {
        if(i < 0 || i == g.length || j < 0 || j == g[0].length)
        {
             return;

        }

        if(g[i][j] != 0)
        {
            return;

        }

        g[i][j] = 2;  // as its visited


        dfs(g, i + 1, j);
        dfs(g, i - 1, j);
        dfs(g, i, j + 1);
        dfs(g, i, j - 1);

    }


    public int regionsBySlashes(String[] grid) 
    {

        int n = grid.length; int result = 0;
        int[][] g = new int[n * 3][n * 3];

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i].charAt(j) == '/') 
                {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } 
                else if(grid[i].charAt(j) == '\\') 
                {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }

            }

        }
                
        
        

        for(int i = 0; i < n * 3; i++)
        {
            for(int j = 0; j < n * 3; j++)
            {
                if(g[i][j] == 0) 
                {
                    dfs(g, i, j);
                    result++;

                }
                
            }

        }

        return result;


        
    }



*/


}
