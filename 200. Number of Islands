class Solution 
{

    int rows, cols, islands = 0;
    
    public int numIslands(char[][] grid) 
    {
        rows = grid.length;
        cols = grid[0].length;

        for(int row = 0; row < rows; row++)
        {
            check(grid, row);

        }
        return islands;
    }

    public void check(char[][] grid, int row) 
    {
        char[] finalRow = grid[row];

        for(int col = 0; col < cols; col++)
        {

            if(finalRow[col] == '1') 
            {
                bfs(grid, row, col);
                islands++;
            }

        }

    }

    public void bfs(char[][] grid, int row, int col) 
    {


        grid[row][col] = '*';

        if(row > 0 && grid[row - 1][col] == '1')
        {
            bfs(grid, row - 1, col);

        }
        if(row + 1 < rows && grid[row + 1][col] == '1')
        {
            bfs(grid, row + 1, col);

        }
        if(col > 0 && grid[row][col - 1] == '1')
        {
            bfs(grid, row, col - 1);

        }
        if(col + 1 < cols && grid[row][col + 1] == '1')
        {
            bfs(grid, row, col + 1);
            
        }


    }


}













/*

(RUNTIME 2 MS, MEMORY 47.58 MB)


class Solution {
    public int numIslands(char[][] grid) 
    {
         int ans = 0;

        for (int i = 0; i < grid.length; ++i)
        {

            for (int j = 0; j < grid[0].length; ++j)
            {
                if (grid[i][j] == '1') 
                {
                    dfs(grid, i, j);
                    ++ans;
                }

            }
                
        }    
            

        return ans;


  }

  public void dfs(char[][] grid, int i, int j) 
  {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
    {
        return;

    }
    if (grid[i][j] != '1')
    {

        return;

    }

    grid[i][j] = '2'; 
    dfs(grid, i + 1, j);
    dfs(grid, i - 1, j);
    dfs(grid, i, j + 1);
    dfs(grid, i, j - 1);
    
  }



}



*/
