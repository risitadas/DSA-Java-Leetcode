class Solution
{
    public boolean disconnected(int[][] grid)
    {
        int n = grid.length, m = grid[0].length;
        int isLandsCount = 0;

        boolean[][] visited = new boolean[n][m];

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {

                if(grid[i][j] ==0 || visited[i][j]) continue;
                
                if(isLandsCount++ > 1) return true;


                dfs(grid, i, j, visited);


            }
        }

        return isLandsCount != 1;



    }

    // An island is a maximal 4-directionally (horizontal or vertical)
    // connected group of 1's.

    public int[][] directions = {{0,1}, {1, 0}, {0, -1}, {-1, 0}}; 

    public void dfs(int[][] grid, int i, int j, boolean[][] visited)
    {
        int n = grid.length, m = grid[0].length;
        visited[i][j] = true;

        for(int[] d : directions)
        {
            int x = i + d[0];
            int y = j + d[1];

            if(x < 0 || x == n || y < 0 || y == m)
            {
                continue;
            }

            if(grid[x][y] == 0 || visited[x][y])
            {
                continue;
            }

            dfs(grid, x, y, visited);


        }

    }



    public int minDays(int[][] grid) 
    {

        if(disconnected(grid))
        {
            return 0;

        }

        for(int i=0; i< grid.length; i++)
        {
            for(int j=0; j<grid[0].length; j++)
            {
                if(grid[i][j] == 1)
                {
                    grid[i][j] = 0;

                    if(disconnected(grid))
                    {
                        return 1;
                    }

                    grid[i][j] = 1;
                }
            }
        }
        

        return 2;
    }
}
