import java.util.*;

class Solution 
{
    public int[][] findFarmland(int[][] land) 
    {
        List<int[]> result = new ArrayList<>();
        
        int m = land.length;
        int n = land[0].length;
        
        for (int i = 0; i < m; i++) 
        {
            for (int j = 0; j < n; j++) 
            {
                if (land[i][j] == 1) 
                {

                    int[] coordinates = findFarmlandCoordinates(land, i, j);
                    result.add(coordinates);
                
                }
            }
        }
        
        return result.toArray(new int[result.size()][]);
    }
    
    public int[] findFarmlandCoordinates(int[][] land, int row, int col) 
    {
        int[] coordinates = new int[4];
        coordinates[0] = row;
        coordinates[1] = col;
        
        int m = land.length;
        int n = land[0].length;
        
        int r = row;
        int c = col;
        
        while (r < m && land[r][col] == 1) r++;
        while (c < n && land[row][c] == 1) c++;
        coordinates[2] = r - 1;
        coordinates[3] = c - 1;
    
        for (int i = row; i < r; i++) 
        {
            for (int j = col; j < c; j++) 
            {

                land[i][j] = 0;
            
            }
        }
        
        return coordinates;
    }
}




/*


RUNTIME 10 ms, Memory 61.50 MB


class Solution {
    public int[][] findFarmland(int[][] land) 
    {

        List<int[]> result = new ArrayList<>();

        for(int i = 0; i < land.length; ++i)
        {
            for(int j = 0; j < land[0].length; ++j)
            {
                if(land[i][j] == 1) 
                {
                    int[] cell = new int[] {i, j};
                    dfs(land, i, j, cell);
                    result.add(new int[] {i, j, cell[0], cell[1]});
                }
            }

        }


        return result.stream().toArray(int[][] ::new);





        
    }

    public void dfs(int[][] land, int i, int j, int[] cell) 
    {
        if(i < 0 || i == land.length || j < 0 || j == land[0].length)
        {
            return;

        }
        if(land[i][j] != 1)
        {
            return;
        

        }


        land[i][j] = 2;
        cell[0] = Math.max(cell[0], i);
        cell[1] = Math.max(cell[1], j);
        dfs(land, i + 1, j, cell);
        dfs(land, i, j + 1, cell);
    
    
    
    }




}


*/
