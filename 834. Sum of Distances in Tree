class Solution 
{

    public int[] sumOfDistancesInTree(int n, int[][] edges) 
    {
        
        graph = new HashMap<>();
        count = new int[n];
        result = new int[n];
        Arrays.fill(count, 1);
        
        for(int i = 0; i < n; i++) 
        {
            graph.put(i, new ArrayList<>());
  
        }

        for (int[] edge : edges) 
        {
            int u = edge[0];
            int v = edge[1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        
        }

        dfs(0, -1);
        dfs2(0, -1);

        return result;



    }

    public HashMap<Integer, List<Integer>> graph;
    public int[] count;
    public int[] result;

    public void dfs(int node, int parent) 
    {
        for(int child : graph.get(node)) 
        {
            if(child != parent) 
            {
                dfs(child, node);
                count[node] += count[child];
                result[node] += result[child] + count[child];
            
            }
        }
    }

    public void dfs2(int node, int parent) 
    {
        for (int child : graph.get(node)) 
        {
            if (child != parent) 
            {
                result[child] = result[node] - count[child] + (count.length - count[child]);
                dfs2(child, node);
            
            }
        
        }
    }

}
