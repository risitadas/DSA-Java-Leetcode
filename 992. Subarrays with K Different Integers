class Solution 
{

    public int subarraysWithKDistinct(int[] nums, int K) 
    {
        int n = nums.length;
        int[] numFreq = new int[n +1];
        int distinct = 0, start = 0, minEnd = 0, total = 0;

        while (distinct == K || minEnd < n) 
        {

            while (distinct < K && minEnd < n) 
			{
                if (numFreq[nums[minEnd++]]++ == 0) 
                {
                    distinct++;
                }
            }

            int maxEnd = minEnd;

            while (maxEnd < n && numFreq[nums[maxEnd]] > 0)
			{
                maxEnd++;
            }


            while (distinct == K) 
            {
                if (numFreq[nums[start++]]-- == 1)
                distinct--;
                total += (maxEnd - minEnd + 1);
            }
        }
        return total;
    }



    /*
    public int subarraysWithKDistinct(int[] nums, int k) 
    {

        int max = subarrayWithMostK(nums, k);
        int reducedMax = subarrayWithMostK(nums , k-1);

        return max - reducedMax;



        
    }



    public int subarrayWithMostK(int[] nums, int k)
    {

        int n = nums.length, start = 0, end = 0, result = 0;
        HashMap<Integer, Integer> map = new HashMap<>();

        while(end < n)
        {

            map.put(nums[end], map.getOrDefault(nums[end], 0) + 1);

            while(map.size() > k)
            {
                map.put(nums[start], map.get(nums[start]) - 1);

                if(map.get(nums[start]) == 0)
                {

                    map.remove(nums[start]);

                }

                start++;

            }

            result += end-start+1;
            end++;

        }
        

        return result;


    }

*/





}
