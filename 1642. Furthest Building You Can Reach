class Solution 
{
    public int furthestBuilding(int[] heights, int bricks, int ladders) 
    {
        int n = heights.length;
        PriorityQueue<Integer> usedBricks = new PriorityQueue<>((a,b) -> b-a);

        for(int i=1; i<n; i++)
        {
            int difference = heights[i] - heights[i-1];

            if(difference >0)
            {
                if(bricks >= difference)
                {
                    usedBricks.add(difference);
                    bricks = bricks - difference;

                }
                else if(ladders > 0)
                {
                    ladders--;

                    if(!usedBricks.isEmpty() && usedBricks.peek() > difference)
                    {

                        bricks += usedBricks.poll();
                        bricks = bricks - difference;
                        usedBricks.add(difference);

                    }
                }
                else
                {
                    return i-1;

                }
            }


        }

        return n-1;




        /*

        int n = heights.length;

        PriorityQueue<Integer> usedBricks = new PriorityQueue<>(Collections.reverseOrder());

        int i=0;
        for( i=0; i<n-1;i++)
        {

            if(heights[i+1] <= heights[i])
            {
                continue;

            }

            int difference = heights[i+1] - heights[i];

            if(difference <= bricks)
            {
                bricks = bricks - difference;
                usedBricks.add(difference);


            }
            else if(ladders >0)
            {

                if(!usedBricks.isEmpty() && usedBricks.peek() > difference)
                {
                    bricks += (usedBricks.remove() - difference);
                    usedBricks.add(difference);

                }

                ladders--;

            }
            else
            {
                break;

            }
        }

        return i;


        */



        
    }
}
