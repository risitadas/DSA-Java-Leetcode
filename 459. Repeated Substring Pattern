class Solution {
    public boolean repeatedSubstringPattern(String s)
    {
        
        /*
        int n = s.length();
        
        String str = s.substring(1, n) + s.substring(0, n-1);
        
        return str.contains(s);

        */


        /*
        int n = s.length();

        for (int i = 1; i < n; i++) 
        {
            String substring = s.substring(0, i);
            int count = 1;
            for (int j = i; j < n; j += i) 
            {
                if (!substring.equals(s.substring(j, j + i))) 
                {
                    break;
                }
                count++;
            }

            if (count * i == n) 
            {
                return true;
            }
        }

        return false;
        */

        int n = s.length();

        for (int i = 1; i < n; i++) 
        {
            if (n % i == 0) 
            {
                boolean isMatch = true;
                for (int j = 0; j < n / i; j++) 
                {
                    if (!s.substring(j * i, (j + 1) * i).equals(s.substring(0, i))) 
                    {
                        isMatch = false;
                        break;
                    }
                }

                if (isMatch) 
                {
                    return true;
                }
            }
        }

        return false;


    }
}
