class Solution 
{

    public void bfs(List<Integer>[] graph, int start, int[] dist)
    {
        
        Queue<Integer> que = new LinkedList<>(Arrays.asList(start));

        while(!que.isEmpty())
        {
            int u = que.poll();

            for(int v : graph[u])
            {
                if(dist[u] + 1 < dist[v])
                {
                    dist[v] = dist[u] + 1;
                    que.offer(v);

                }
            }
        }

    }




    public int[] shortestDistanceAfterQueries(int n, int[][] queries) 
    {

        int[] result = new int[queries.length];
        int[] dist = new int[n];

        List<Integer>[] graph = new List[n];

        for(int i=0;i<n;i++)
        {
            dist[i] = i;
            graph[i] = new ArrayList<>();

        }

        for(int i=0;i<n-1; i++)
        {
            graph[i].add(i+1);

        }

        for(int i=0;i<queries.length; i++)
        {
            int u = queries[i][0];
            int v = queries[i][1];

            graph[u].add(v);

            if(dist[u] + 1 < dist[v])
            {
                dist[v] = dist[u] + 1;
                bfs(graph, v, dist);

            }

            result[i] = dist[n-1];
        }

        return result;

        
    }
}
