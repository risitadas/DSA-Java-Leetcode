class Solution {

    public String makeGood(String s) 
    {

        if (s.length() == 0 || s.length() == 1)
        {
            return s;
        }

        int i = 0;
        StringBuilder sb = new StringBuilder();
        sb.append(s);

    
        while (i < sb.length() - 1)
        {
            char leftChar = sb.charAt(i);
            char rightChar = sb.charAt(i + 1);

            if (Math.abs(leftChar - rightChar) == 32)
            {
                sb.delete(i, i + 2);

                if (i > 0)
                {
                    i--;
                    
                }
            }
            else
            {
                i++;
            } 
        }

        return sb.toString();
    }





/*
    public String makeGood(String s)
    {

        Stack<Character> stk = new Stack<>();

        for(char c:s.toCharArray())
        {

            if(!stk.isEmpty() && Math.abs(c-stk.peek()) == 32)
            {
                stk.pop();

            }
            else
            {
                stk.push(c);

            }

        }

        StringBuilder sb = new StringBuilder();

        while(!stk.isEmpty())
        {

            sb.insert(0, stk.pop());

        }

        return sb.toString();



    }

*/

    /*
    public String makeGood(String s) 
    {

        StringBuilder sb = new StringBuilder();


        for(char c : s.toCharArray())
        {
            if (sb.length() > 0 && isBadPair(sb.charAt(sb.length() - 1), c))
            {
                sb.deleteCharAt(sb.length() - 1);

            }
            else
            {
                sb.append(c);
            }

        }
        
        
        return sb.toString();



        
    }

    public boolean isBadPair(char a, char b) 
    {

        return a != b && Character.toLowerCase(a) == Character.toLowerCase(b);
    
    }


    */

}
