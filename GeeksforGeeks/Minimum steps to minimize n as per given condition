

class Solution{

	public int minSteps(int N) 
	{ 
	    // Your code goes here
	    
	    
	    if(N == 1)
	    {
	        return 0;
	        
	    }
	    
	    int[] dp = new int[N+1];
	    
	    Arrays.fill(dp, Integer.MAX_VALUE);
	    
	    dp[1] = 0;
	    
	    for(int i = 2; i<= N; i++)
	    {
	        
	        if(i % 2 == 0)
	        {
	            
	            dp[i] = Math.min(dp[i], dp[i/2] + 1);
	            
	        }
	        
	        if(i % 3 == 0)
	        {
	            
	            dp[i] = Math.min(dp[i], dp[i/3] + 1);
	            
	        }
	        
	        dp[i] = Math.min(dp[i], dp[i-1] + 1);
	        
	        
	    }
	    
	    return dp[N];
	    
	    
	    
	    
	} 
}



----------------------------------------------------------------------------------------------------------------------------------




class Solution{

	public int minSteps(int N) 
	{ 
	    // Your code goes here
	    
	    
	    int[] func = new int[N+1];
	    
	    for(int i=0; i<=N; i++)
	    {
	        
	        func[i] = N-i;
	        
	    }
	    
	    
	    for(int i = N-1; i>=1; i--)
	    {
	        
	        func[i] = Math.min(func[i], func[i+1] + 1);
	        
	        if(i * 2 <= N)
	        {
	            
	          	func[i] = Math.min(func[i], func[i*2] + 1); 
	            
	        }
	        
	        if (i*3 <= N) 
	        {
	          	
	          	func[i] = Math.min(func[i], func[i*3] + 1); 
	          	
	        }
	        
	        
	        
	        
	    }
	    
	    
	    return func[1];
	    
	} 
	
	
	    

}























