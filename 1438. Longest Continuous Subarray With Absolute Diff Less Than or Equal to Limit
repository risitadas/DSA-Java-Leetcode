class Solution {
    public int longestSubarray(int[] nums, int limit) 
    {

        LinkedList<Integer> minQ = new LinkedList<>();
        LinkedList<Integer> maxQ = new LinkedList<>();

        int result=0, left=0;

        for(int i=0; i<nums.length; i++)
        {
            int n= nums[i];

            while(minQ.size() > 0 && nums[i] > minQ.getLast())
            {
                minQ.removeLast();

            }
            minQ.add(n);

            while(maxQ.size() > 0 && n < maxQ.getLast())
            {
                maxQ.removeLast();

            }
            maxQ.add(n);


            while(minQ.getFirst() - maxQ.getFirst() > limit)
            {

                if(nums[left] == minQ.getFirst())
                {
                    minQ.removeFirst();

                }

                if(nums[left] == maxQ.getFirst())
                {
                    maxQ.removeFirst();

                }

                left++;

            }

            int len = i-left+1;
            result= Math.max(result, len);





        }
        return result;

        
    }
}
