class Solution 
{
    public void dfs(ArrayList<Integer>[] graph, int parent, int curr, ArrayList<List<Integer>> ans, boolean[] visited)
    {

        visited[curr] = true;

        for(int d : graph[curr])
        {
            if(!visited[d])
            {
                ans.get(d).add(parent);
                dfs(graph, parent, d, ans, visited);

            }
        }
    }



    public List<List<Integer>> getAncestors(int n, int[][] edges) 
    {

        ArrayList<List<Integer>> result = new ArrayList<>();
        for(int i=0; i<n; i++)
        {
            result.add(new ArrayList<>());
        }

        ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i=0; i<n; i++)
        {
            graph[i] = new ArrayList<>();

        }

        for(int[] edge : edges) 
        {
            graph[edge[0]].add(edge[1]);
        }

        for(int i = 0; i < n; i++) 
        {
            dfs(graph, i, i, result, new boolean[n]);
        }

        for(int i = 0; i < n; i++) 
        {
            result.get(i).sort(Integer::compareTo);
        }
        return result;


        
    }


}
