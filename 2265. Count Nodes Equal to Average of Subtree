/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int count = 0;
    public int averageOfSubtree(TreeNode root) 
    {

        getaverageOfSubtree(root);
        return count;
        
    }


  public int[] getaverageOfSubtree(TreeNode curr)
    {

        if(curr == null)
        {
            return new int[]{0,0};

        }

        int[] left = getaverageOfSubtree(curr.left);
        int[] right = getaverageOfSubtree(curr.right);

        int sumOfVals = left[0] + right[0] + curr.val;
        int numNodes = left[1] + right[1] + 1;

        if(sumOfVals / numNodes == curr.val)
        {
            count++;

        }

        return new int[]{sumOfVals, numNodes};



    }
}
