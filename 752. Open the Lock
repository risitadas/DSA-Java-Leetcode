class Solution {
    public int openLock(String[] deadends, String target) 
    {

        if(target.equals("0000"))
        {
            return 0;

        }

        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);

        boolean[] visited = new boolean[10000];

        for(String s : deadends)
        {

            visited[Integer.parseInt(s)] = true;



        }

        int n = Integer.parseInt(target);

        if(visited[0])
        {
            return -1;

        }

        for(int turns = 1; !queue.isEmpty() ;turns++)
        {

            int len = queue.size();

            for(int i=0;i<len;i++)
            {
                int curr = queue.poll();

                for(int j=1;j<10000; j*=10)
                {
                    int mask = curr % (j*10) / j;
                    int masked = curr - (mask*j);

                    for(int k=1;k<10; k+= 8)
                    {

                        int next = masked + (mask+k) %10*j;

                        if(visited[next])
                        {
                            continue;

                        }

                        if(next == n)
                        {
                            return turns;

                        }

                        visited[next] = true;
                        queue.add(next);



                    }

                }
            }



        }

        return -1;


        
    }
}
