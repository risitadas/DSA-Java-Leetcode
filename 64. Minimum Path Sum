(runtime 0ms solution below)

class Solution {

    int n=0,m=0;

    public int minPathSum(int[][] grid) 
    {

        n = grid.length;
        m = grid[0].length;

        int[][] dp = new int[n][m];
        return dfs(grid, 0, 0, dp);
        
        
    }

    public int dfs(int[][] grid, int i, int j, int[][] dp)
    {


        if(i > n-1 || j > m-1)
        {

            return Integer.MAX_VALUE;

        }

        if(i == n-1 && j == m-1)
        {
            return grid[i][j];

        }

        if(dp[i][j] > 0)
        {
            return dp[i][j];

        }

        dp[i][j] = grid[i][j] + Math.min(dfs(grid, i+1, j, dp), dfs(grid, i, j+1, dp));

        return dp[i][j];
        







    }
}




-------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------


(runtime 2ms solution below)


class Solution {
    public int minPathSum(int[][] grid) 
    {

        int n = grid.length;
        int m = grid[0].length;

        for(int i = 1; i<n; i++)
        {
            grid[i][0] += grid[i-1][0];

        }

        for(int j = 1; j<m; j++)
        {
            grid[0][j] += grid[0][j-1];

        }

        for(int i=1; i<n; i++)
        {
            for(int j=1; j<m; j++)
            {
                grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);

            }

        }

        return grid[n-1][m-1];





        
    }
}
