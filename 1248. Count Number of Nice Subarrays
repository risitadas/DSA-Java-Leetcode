class Solution {

    public int numberOfSubarrays(int[] nums, int k) 
    {
        int n = nums.length;

        int[] count = new int[n + 1];
        count[0] = 1;
        
        int result = 0, t = 0;

        for (int v : nums) 
        {
            t += v & 1;

            if(t - k >= 0) 
            {
                result += count[t - k];
            }
            count[t]++;

        }

        return result;
    }





    /*

    RUNTIME 14 MS, MEMORY 54.84 MB

    public int numberOfSubarrays(int[] nums, int k) 
    {
        return numberOfSubarraysAtMost(nums, k) - numberOfSubarraysAtMost(nums, k - 1);

        
    }

    public int numberOfSubarraysAtMost(int[] nums, int k)
    {

        int result = 0;

        for(int l = 0, r = 0; r <= nums.length;)
        {
            if(k >= 0) 
            {
                result += r - l;
                if(r == nums.length)
                {
                    break;
                }
                if(nums[r] % 2 == 1)
                {
                     k--;
                }
            
                r++;
            }
            else 
            {
                if (nums[l] % 2 == 1)
                {
                    k++;
                }
                
                
                l++;
            }


        }

        
        return result;

    }

    */


}
