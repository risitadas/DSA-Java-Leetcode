class Solution {
    public int coinChange(int[] coins, int amount) 
    {
        int[] dp = new int[amount + 1];
        dp[0] = 0;

        for(int i = 1; i < dp.length; i++) 
        {
            dp[i] = amount + 1;
        }

        for(int coin : coins)
        {
            for(int i = coin; i < dp.length; i++) 
            {
                dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
       
        return dp[amount] <= amount ? dp[amount] : -1;





        /*

        //bottom up approach


        int n = coins.length;

        int[] dp = new int[amount + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);

        dp[0] = 0;

        

        for(int i = 1; i <= amount; i++) 
        {
            for(int j = 0; j < n; j++) 
            {

                if(i - coins[j] >= 0 && dp[i - coins[j]] != Integer.MAX_VALUE) 
                {
                    dp[i] = Math.min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        return (dp[amount] == Integer.MAX_VALUE) ?  -1 : dp[amount];
    */



        /*

        int n = coins.length;

        int[] dp = new int[amount + 1];
        dp[0] = 0;

        for(int i=1; i<= amount; i++)
        {
            int min = Integer.MAX_VALUE;

            for(int coin : coins)
            {
                if(i-coin >= 0)
                {
                    min = Math.min(min, dp[i-coin]);

                }
            }

            if(min != Integer.MAX_VALUE)
            {
                dp[i] = 1+min;

            }
            else
            {
                dp[i] = min;

            }
        }

        if(dp[amount] != Integer.MAX_VALUE)
        {
            return dp[amount];

        }

        return -1;


        */





/*
        int amt = amount;
        int n = coins.length;
        int[][] dp = new int[n+1][amt+1];

        for(int j=0; j<=amt; j++)
        {
            dp[0][j] = 0;
        }

        for(int i=1; i<=n; i++)
        {

            for(int j=1; j<=amt; j++)
            {
                int min = Integer.MAX_VALUE;

                if((i-1) == 0)
                {
                    if(j % coins[i-1] == 0)
                    {

                        dp[i][j] = j/coins[i-1];

                    }
                    else
                    {
                        dp[i][j] = (int)1e9;

                    }
                }
                else
                {
                    int m = dp[i-1][j];

                    if(coins[i-1] <= j)
                    {
                        min = dp[i][j - coins[i-1]] + 1;

                    }

                    dp[i][j] = Math.min(min, m);

                }
            }
        }

        if(dp[n][amt] >= 1e9)
        {
            return -1;

        }
        else
        {
            return dp[n][amt];
        }


        */
        
    }
}
