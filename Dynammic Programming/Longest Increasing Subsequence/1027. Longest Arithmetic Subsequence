class Solution {
    
    public int longestArithSeqLength(int[] nums) 
    {
        int len = 2;
        int max = nums[0], min = nums[0];

        for(int num : nums)
        {

            if(num > max)
            {
                max = num;
            }
            if(num < min)
            {
                min = num;

            }
        }

        int difference = max-min;

        int[] upDP = new int[max+1];
        int[] downDP = new int[max+1];

        for(int i = 0; i*len <= difference; i++)
        {

            Arrays.fill(upDP, 0);
            Arrays.fill(downDP, 0);

            for(int num : nums)
            {
                if (len < (upDP[num] = (num + i <= max) ? (upDP[num + i] + 1) : 1))
                {
                    len = upDP[num];

                }

                if (len < (downDP[num] = (num - i >= 0) ? (downDP[num - i] + 1) : 1))
                {
                    len = downDP[num];

                }


            }

            







        }
        return len;














        /*

        int n = nums.length;
        int max=0;

        HashMap<Integer, Integer>[] dp = new HashMap[n];

        for(int i=0; i<n; i++)
        {
            dp[i] = new HashMap<>();

            for(int j=0; j<i; j++)
            {

                int difference = nums[i] - nums[j];

                dp[i].put(difference, dp[j].getOrDefault(difference, 1) + 1);
                max = Math.max(max, dp[i].get(difference));

            }
        }

        return max;

        */


        
    }
}
