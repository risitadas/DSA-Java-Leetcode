class Solution {
    public int minimumTotal(List<List<Integer>> triangle) 
    {

        int n = triangle.size();

        int[][] dp = new int[n+1][n+1];

        for(int i=0; i<=n; i++)
        {

            for(int j=0; j<=n; j++)
            {
                dp[i][j] = -1;

            }
        }

        return minPathTotal(triangle, dp, 0, 0);


        
    }


    public int minPathTotal(List<List<Integer>> triangle, int[][] dp, int i, int j)
    {


        int n = triangle.size();

        if(i >= n || j >= n)
        {
            return 0;

        }

        if(dp[i][j] != -1)
        {
            return dp[i][j];

        }

        int fr = minPathTotal(triangle, dp, i+1, j);
        int se = minPathTotal(triangle, dp, i+1, j+1);

        return dp[i][j] = Math.min(fr, se) + triangle.get(i).get(j);

    }
}
