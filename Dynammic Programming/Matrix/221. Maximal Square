class Solution {
    public int maximalSquare(char[][] matrix) 
    {
       
        int n = matrix.length;
        int m = matrix[0].length;

        if(matrix == null || n == 0 || m == 0)
        {
            return 0;
        }

        int result = 0;

        int[][] dp = new int[n+1][m+1];
        int len = dp.length;

        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=m; j++)
            {

                if(matrix[i-1][j-1] == '1')
                {
                    dp[i][j] = Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1])) + 1 ;
                    result = Math.max(result, dp[i][j]);

                }
            }
        }

        return result*result;
        
        

    }



/*
    public int getmaximalSquare(char[][] matrix)
    {

        
        

        for(int i =0; i<len; i++)
        {
            if(matrix[i][0] == '1');
            {
                dp[i][0] = 1;
                result = 1;

            }
        }

        for(int j=0; j<dp[0].length; j++)
        {
            if(matrix[0][j] == '1')
            {
                dp[0][j] = 1;
                result = 1;

            }
        }

        for(int i=0; i<len; i++)
        {

            for(int j=1; j<dp[0].length; j++)
            {

                if(matrix[i][j] == '1')
                {

                    dp[i][j] = Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1])) + 1;
                    result = Math.max(result, dp[i][j]);


                }
            }
        }

        return result * result;







    }

    */
}
