class Solution {


    public int getmaxProfit(int[] prices)
    {
        int n = prices.length, maxProfit = 0;

        for(int i=1; i<n; i++)
        {
            if(prices[i] > prices[i-1])
            {
                maxProfit += prices[i] - prices[i-1];

            }
        }

        return maxProfit;
    }




    public int maxProfit(int k, int[] prices) 
    {

        int n = prices.length;
        int[][] dp = new int[k+1][n];

        if(n<=1)
        {
            return 0;

        }

        if(k >= n/2)
        {
            return getmaxProfit(prices);
        }

        for(int i=1; i<= k; i++)
        {
            int max = -prices[0];

            for(int j=1; j<n; j++)
            {
                dp[i][j] = Math.max(dp[i][j-1] , prices[j] + max);

                max = Math.max(max, dp[i-1][j-1] - prices[j]);
            }
        }

        return dp[k][n-1];


        /*

        if(k >=n/2)
        {
            int max=0;

            for(int i=1; i<n ;i++)
            {
                if(prices[i] > prices[i-1])
                {
                    max += prices[i] - prices[i-1];

                }
            }

            return max;
        }


        for(int i=1; i<=k ;i++)
        {
            int curr = dp[i-1][0] - prices[0];

            for(int j=1; j<n; j++)
            {
                curr = Math.max(dp[i-1][j] - prices[j], curr);

                dp[i][j] = Math.max(prices[j] + curr, dp[i][j-1]);
            
            
            
            }



        }

        return dp[k][n-1];


        */


        
    }
}
