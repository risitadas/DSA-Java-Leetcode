class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) 
    {
        int minCountofCities = n;
        int result=-1;

        int[][] dist = floydWarshall(n, edges, distanceThreshold);

        for(int i=0; i<n; i++)
        {
            int count=0;
            for(int j=0;j<n;j++)
            {
                if(dist[i][j] <= distanceThreshold)
                {
                    count++;

                }


            }

            if(count <= minCountofCities)
            {
                minCountofCities = count;
                result = i;
            }
        }

        return result;

        
    }

    public int[][] floydWarshall(int n, int[][] edges, int distanceThreshold)
    {
        int[][] dist = new int[n][n];

        for(int i = 0; i<dist.length; i++) 
        {
            Arrays.fill(dist[i], distanceThreshold + 1);

        }

        for(int i=0;i<n; i++)
        {
            dist[i][i] = 0;
        }

        for(int[] e : edges)
        {
            int u = e[0];
            int v = e[1];
            int w =  e[2];

            dist[u][v] = w;
            dist[v][u] = w;

        }

        for(int k=0; k< n; k++)
        {
            for(int i=0; i<n; i++)
            {
                for(int j=0; j<n; j++)
                {
                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);

                }
            }
        }

        return dist;






    }



}
